{"version":3,"sources":["webpack:///../README.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---readme-md-0336b95927147b969f94.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/johannesklauss/Documents/Development/react-hotkeys-hook/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"react-hotkeys-hook\"\n    }}>{`react-hotkeys-hook`}</h1>\n    <p>{`React hook for using keyboard shortcuts in components.\nThis is a hook version for the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/jaywcjlove/hotkeys\"\n      }}>{`hotkeys`}</a>{` package.`}</p>\n    <h3 {...{\n      \"id\": \"documentation-and-live-example\"\n    }}>{`Documentation and live example`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://johannesklauss.github.io/react-hotkeys-hook/\"\n      }}>{`https://johannesklauss.github.io/react-hotkeys-hook/`}</a></p>\n    <h3 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`npm install react-hotkeys-hook\n`}</code></pre>\n    <p>{`or`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`yarn add react-hotkeys-hook\n`}</code></pre>\n    <p>{`Make sure that you have at least version 16.8 of `}<inlineCode parentName=\"p\">{`react`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`react-dom`}</inlineCode>{` installed, or otherwise hooks won't work for you.`}</p>\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`export const ExampleComponent = () => {\n  const [count, setCount] = useState(0);\n  useHotkeys('ctrl+k', () => setCount(prevCount => prevCount + 1));\n    \n  return (\n    <p>\n      Pressed {count} times.\n    </p>\n  );\n};\n`}</code></pre>\n    <p>{`The hook takes care of all the binding and unbinding for you.\nAs soon as the component mounts into the DOM, the key stroke will be\nlistened to. When the component unmounts it will stop listening.`}</p>\n    <h3 {...{\n      \"id\": \"call-signature\"\n    }}>{`Call Signature`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`useHotkeys(keys: string, callback: (event: KeyboardEvent, handler: HotkeysEvent) => void, options: Options = {}, deps: any[] = [])\n`}</code></pre>\n    <p>{`The callback function takes the exact parameters as the callback function in the hotkeys package.\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/jaywcjlove/hotkeys\"\n      }}>{`hotkeys`}</a>{` documentation for more info or look into the typings file.`}</p>\n    <h3 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`keys: string`}</inlineCode>{`: Here you can set the key strokes you want the hook to listen to. You can use single or multiple keys,\nmodifier combination, etc. See `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/jaywcjlove/hotkeys/#defining-shortcuts\"\n        }}>{`this`}</a>{`\nsection on the hotkeys documentation for more info.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`callback: (event: KeyboardEvent, handler: HotkeysEvent) => void`}</inlineCode>{`: Gets executed when the defined keystroke\ngets hit by the user. `}<strong parentName=\"li\">{`Important:`}</strong>{` Since version 1.5.0 this callback gets memoised inside the hook. So you don't have\nto do this anymore by yourself.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`options: Options = {}`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`filter: (event: KeyboardEvent): boolean`}</inlineCode>{` is used to enable hotkeys inside input elements. Check out `}<a parentName=\"li\" {...{\n              \"href\": \"https://github.com/jaywcjlove/hotkeys/#filter\"\n            }}>{`hotkeys docs`}</a>{` for usage. Due to constraints with the base library, `}<inlineCode parentName=\"li\">{`filter`}</inlineCode>{` is a global setting. As a result, it is currently not possible to have different filters for separate calls of `}<inlineCode parentName=\"li\">{`useHotkey`}</inlineCode>{`.`}</li>\n          <li parentName=\"ul\"><ul parentName=\"li\">\n              <li parentName=\"ul\"><inlineCode parentName=\"li\">{`enableOnTags: string[]`}</inlineCode>{` is used to enable listening to hotkeys in form fields. Available values are `}<inlineCode parentName=\"li\">{`INPUT`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`TEXTAREA`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`SELECT`}</inlineCode>{`. `}<strong parentName=\"li\">{`IMPORTANT!`}</strong>{` When you provide a custom `}<inlineCode parentName=\"li\">{`filter`}</inlineCode>{` implementation function this parameter will be ignored. Similar to `}<inlineCode parentName=\"li\">{`filter`}</inlineCode>{`, setting this option will enable it globally.`}</li>\n            </ul></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`splitKey: string`}</inlineCode>{` is used to change the splitting character inside the keys argument. Default is `}<inlineCode parentName=\"li\">{`+`}</inlineCode>{`, but if you want\nto listen to the `}<inlineCode parentName=\"li\">{`+`}</inlineCode>{` character, you can set `}<inlineCode parentName=\"li\">{`splitKey`}</inlineCode>{` to i.e. `}<inlineCode parentName=\"li\">{`-`}</inlineCode>{` and listen for `}<inlineCode parentName=\"li\">{`ctrl-+`}</inlineCode></li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`keyup: boolean`}</inlineCode>{` Determine if you want to listen on the keyup event`}</li>\n          <li parentName=\"ul\"><inlineCode parentName=\"li\">{`keydown: boolean`}</inlineCode>{` Determine if want to listen on the keydown event`}</li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`deps: any[] = []`}</inlineCode>{`: The dependency array that gets appended to the memoisation of the callback. Here you define the inner\ndependencies of your callback. If for example your callback actions depend on a referentially unstable value or a value\nthat will change over time, you should add this value to your deps array. Since most of the time your callback won't\ndepend on any unstable callbacks or changing values over time you can leave this value alone since it will be set to an\nempty array by default. See the `}<a parentName=\"li\" {...{\n          \"href\": \"#memoisation\"\n        }}>{`Memoisation`}</a>{` section to\nlearn more and see an example where you have to set this array.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"useishotkeypressed-hook\"\n    }}><inlineCode parentName=\"h3\">{`useIsHotkeyPressed`}</inlineCode>{` hook`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`useIsHotkeyPressed`}</inlineCode>{` hook just returns the `}<inlineCode parentName=\"p\">{`hotkeys.isPressed`}</inlineCode>{` function and works exactly the same.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const isPressed = useIsHotkeyPressed();\n\nisPressed(13); // Returns true if Return key is pressed down.\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"found-an-issue-or-have-a-feature-request\"\n    }}>{`Found an issue or have a feature request?`}</h3>\n    <p>{`Open up an issue or pull request and participate.`}</p>\n    <h3 {...{\n      \"id\": \"local-development\"\n    }}>{`Local Development`}</h3>\n    <p>{`Checkout this repo, run `}<inlineCode parentName=\"p\">{`yarn`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`npm i`}</inlineCode>{` and then run the `}<inlineCode parentName=\"p\">{`docz:dev`}</inlineCode>{` script.\nYou can use the `}<inlineCode parentName=\"p\">{`docs/useHotkeys.mdx`}</inlineCode>{` to test the behavior of the hook. It directly imports the\n`}<inlineCode parentName=\"p\">{`src/index.ts`}</inlineCode>{` file and transpiles it automatically. So you don't have to worry about. For more info\non .mdx files, check out the docz documentation: `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.docz.site/docs/writing-mdx\"\n      }}>{`https://www.docz.site/docs/writing-mdx`}</a></p>\n    <h3 {...{\n      \"id\": \"authors\"\n    }}>{`Authors`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Johannes Klauss`}</li>\n    </ul>\n    <hr></hr>\n    <p>{`MIT License.`}</p>\n    <hr></hr>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}